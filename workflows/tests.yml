name: Tests and Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng
        sudo apt-get install -y poppler-utils
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Generate test fixtures
      run: |
        python generate_test_fixtures.py
    
    - name: Run fast tests
      run: |
        pytest tests/ -v --maxfail=1 --disable-warnings \
          -m "not slow and not ocr and not performance" \
          --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Run slow tests (limited)
      if: matrix.python-version == '3.11'
      run: |
        pytest tests/ -v --disable-warnings \
          -m "slow or ocr" --maxfail=3
      env:
        RUN_SLOW_TESTS: true
    
    - name: Run performance tests (limited)
      if: matrix.python-version == '3.11' && github.event_name == 'push'
      run: |
        pytest tests/ -v --disable-warnings \
          -m "performance" --maxfail=2
      env:
        RUN_PERFORMANCE_TESTS: true
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run black (check only)
      run: |
        black --check --diff src/ tests/
    
    - name: Run flake8
      run: |
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Run mypy
      run: |
        mypy src/ --ignore-missing-imports --strict-optional

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check --ignore 70612
    
    - name: Run bandit security check
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ --severity-level medium

  integration:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng
        sudo apt-get install -y poppler-utils
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Generate test fixtures
      run: |
        python generate_test_fixtures.py
    
    - name: Run integration tests
      run: |
        pytest tests/ -v --disable-warnings \
          -m "integration" --maxfail=5 \
          --cov=src --cov-report=xml
      env:
        RUN_INTEGRATION_TESTS: true
    
    - name: Test CLI functionality
      run: |
        python -m src.ui.app --help || echo "Streamlit app help check"
    
    - name: Archive test artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-artifacts
        path: |
          tests/fixtures/
          coverage.xml
          bandit-report.json
        retention-days: 7